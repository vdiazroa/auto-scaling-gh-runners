# Use an official Ubuntu base image
FROM ubuntu:22.04

# Define build arguments (available only during `docker build`)
ARG DOCKER=false
ARG NODE=false

# Set environment variables (available inside the container)
ENV DEBIAN_FRONTEND=noninteractive
ENV DOCKER=$DOCKER
ENV NODE=$NODE

# ‚úÖ Update package lists & install base dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y curl git jq unzip \
    libicu-dev libcurl4-openssl-dev libssl-dev software-properties-common python3-pip && \
    rm -rf /var/lib/apt/lists/*

RUN if [ "$DOCKER" = "true" ] || [ "$NODE" = "true" ]; then \
    apt-get install -y ca-certificates gnupg lsb-release && \
    rm -rf /var/lib/apt/lists/*; \
    fi

# ‚úÖ Conditionally Install Python, Docker, and Node.js in a single RUN
RUN if [ "$DOCKER" = "true" ]; then \
        echo "üì¶ Installing Docker..." && \
        mkdir -p /etc/apt/keyrings && \
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null && \
        apt-get update && \
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin; \
    else echo "‚è≠ Skipping Docker installation."; fi && \
    if [ "$NODE" = "true" ]; then \
        echo "üì¶ Installing Node.js & Package Managers..." && \
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
        apt-get install -y nodejs && \
        npm install -g yarn pnpm; \
    else echo "‚è≠ Skipping Node.js installation."; fi && \
    rm -rf /var/lib/apt/lists/*

# ‚úÖ Create a non-root user for the runner
RUN useradd -m -s /bin/bash runner && \
    mkdir -p /home/runner/actions-runner

# ‚úÖ Give the runner access to Docker (if installed) & fix permissions
RUN if [ "$DOCKER" = "true" ]; then usermod -aG docker runner; fi && \
    chown -R runner:runner /home/runner /usr/local && \
    chmod -R 775 /usr/local/bin

# ‚úÖ Set working directory
WORKDIR /home/runner/actions-runner

# ‚úÖ Get the latest GitHub Actions runner version & download
RUN LATEST=$(curl -sI https://github.com/actions/runner/releases/latest | grep -Fi "location" | sed -E 's#.*/tag/v##' | tr -d '\r') && \
    ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "amd64" ]; then \
        curl -o actions-runner-linux.tar.gz -L https://github.com/actions/runner/releases/download/v${LATEST}/actions-runner-linux-x64-${LATEST}.tar.gz; \
    elif [ "$ARCH" = "arm64" ]; then \
        curl -o actions-runner-linux.tar.gz -L https://github.com/actions/runner/releases/download/v${LATEST}/actions-runner-linux-arm64-${LATEST}.tar.gz; \
    else \
        echo "‚ùå Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    tar xzf ./actions-runner-linux.tar.gz && \
    rm actions-runner-linux.tar.gz

# ‚úÖ Copy entry script & set permissions
COPY gh-runner-entrypoint.sh /home/runner/entrypoint.sh
RUN chmod +x /home/runner/entrypoint.sh && chown runner:runner /home/runner/entrypoint.sh

# ‚úÖ Switch to the runner user
USER runner

# ‚úÖ Start the runner
ENTRYPOINT ["/home/runner/entrypoint.sh"]