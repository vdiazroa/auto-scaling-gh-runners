# Use an official Ubuntu base image
FROM ubuntu:20.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# ✅ Update package lists & install required dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y \
    curl git jq unzip \
    libicu-dev libcurl4-openssl-dev libssl-dev \
    ca-certificates gnupg lsb-release software-properties-common \
    python3 python3-pip \
    && rm -rf /var/lib/apt/lists/*

# ✅ Add Docker's official GPG key and repository (fixes missing docker-ce package)
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y \
    docker-ce docker-ce-cli containerd.io docker-buildx-plugin \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user for the runner
RUN useradd -m -s /bin/bash runner && \
    mkdir -p /home/runner/actions-runner

# Give the runner access to Docker & fix permissions
RUN usermod -aG docker runner && \
    chown -R runner:runner /home/runner && \
    chown -R runner:runner /usr/local && \
    chmod -R 775 /usr/local/bin

# Set working directory
WORKDIR /home/runner/actions-runner

# Get the latest version of GitHub Actions runner
RUN LATEST=$(curl -sI https://github.com/actions/runner/releases/latest | grep -Fi "location" | sed -E 's#.*/tag/v##' | tr -d '\r') && \
    ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "amd64" ]; then \
        curl -o actions-runner-linux.tar.gz -L https://github.com/actions/runner/releases/download/v${LATEST}/actions-runner-linux-x64-${LATEST}.tar.gz; \
    elif [ "$ARCH" = "arm64" ]; then \
        curl -o actions-runner-linux.tar.gz -L https://github.com/actions/runner/releases/download/v${LATEST}/actions-runner-linux-arm64-${LATEST}.tar.gz; \
    else \
        echo "❌ Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    tar xzf ./actions-runner-linux.tar.gz && \
    rm actions-runner-linux.tar.gz

# Copy entry script as root
COPY gh-runner-entrypoint.sh /home/runner/entrypoint.sh

# ✅ Change permissions while still root
RUN chmod +x /home/runner/entrypoint.sh && chown runner:runner /home/runner/entrypoint.sh

# ✅ Now switch to the runner user
USER runner

# Start the runner
ENTRYPOINT ["/home/runner/entrypoint.sh"]