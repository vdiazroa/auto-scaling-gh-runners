# Use an official Ubuntu base image
FROM ubuntu:24.04

# Define build arguments
ARG DOCKER=false
ARG NODE=false
ARG DOCKER_GID

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV DOCKER=$DOCKER

# ‚úÖ Update package lists & install base dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y curl git jq unzip sudo \
    libicu-dev libcurl4-openssl-dev libssl-dev software-properties-common python3-pip && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    rm -rf /var/lib/apt/lists/*

# ‚úÖ Optionally install cert tools
RUN if [ "$DOCKER" = "true" ] || [ "$NODE" = "true" ]; then \
    apt-get update && \
    apt-get install -y ca-certificates gnupg lsb-release && \
    rm -rf /var/lib/apt/lists/*; \
    fi

# ‚úÖ Create a non-root user for the runner
RUN useradd -m -s /bin/bash runner && \
    mkdir -p /home/runner/actions-runner

# ‚úÖ Docker install and group fix
RUN if [ "$DOCKER" = "true" ]; then \
    echo "üì¶ Installing Docker..." && \
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin && \
    \
    EXISTING_GID=$(getent group docker | cut -d: -f3 2>/dev/null || echo "") && \
    if [ "$DOCKER_GID" -eq 0 ]; then \
        echo "‚ö†Ô∏è Docker socket GID is 0 (root), adding user to 'root' group"; \
        usermod -aG root runner; \
    elif [ -z "$EXISTING_GID" ]; then \
        echo "‚ûï Creating docker group with GID $DOCKER_GID"; \
        groupadd -g "$DOCKER_GID" docker; \
    elif [ "$EXISTING_GID" != "$DOCKER_GID" ]; then \
        if getent group "$DOCKER_GID" >/dev/null; then \
            echo "‚ùå GID $DOCKER_GID is already taken. Cannot modify docker group."; \
        else \
            echo "üîÅ Changing docker group GID from $EXISTING_GID to $DOCKER_GID"; \
            groupmod -g "$DOCKER_GID" docker; \
        fi; \
    else \
        echo "‚úÖ Docker group already has correct GID $DOCKER_GID"; \
    fi && \
    usermod -aG docker runner; \
else \
    echo "‚è≠ Skipping Docker installation."; \
fi

# ‚úÖ Optionally install Node.js
RUN if [ "$NODE" = "true" ]; then \
    echo "üì¶ Installing Node.js & Package Managers..." && \
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g yarn pnpm; \
else \
    echo "‚è≠ Skipping Node.js installation."; \
fi && \
rm -rf /var/lib/apt/lists/*

# ‚úÖ Fix permissions
RUN chown -R runner:runner /home/runner /usr/local && \
    chmod -R 775 /usr/local/bin

# ‚úÖ Set working directory
WORKDIR /home/runner/actions-runner

# ‚úÖ Get the latest GitHub Actions runner version & download
RUN LATEST=$(curl -sI https://github.com/actions/runner/releases/latest | grep -Fi "location" | sed -E 's#.*/tag/v##' | tr -d '\r') && \
    ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "amd64" ]; then ARCH_SUFFIX="x64"; \
    elif [ "$ARCH" = "arm64" ]; then ARCH_SUFFIX="arm64"; \
    else echo "‚ùå Unsupported architecture: $ARCH" && exit 1; fi && \
    curl -o actions-runner-linux.tar.gz -L https://github.com/actions/runner/releases/download/v${LATEST}/actions-runner-linux-${ARCH_SUFFIX}-${LATEST}.tar.gz && \
    tar xzf ./actions-runner-linux.tar.gz && \
    rm actions-runner-linux.tar.gz

# ‚úÖ Copy entry script & set permissions
COPY gh-runner-entrypoint.sh /home/runner/entrypoint.sh
RUN chmod +x /home/runner/entrypoint.sh && chown runner:runner /home/runner/entrypoint.sh

# ‚úÖ Switch to the runner user
USER runner

# ‚úÖ Start the runner
ENTRYPOINT ["/home/runner/entrypoint.sh"]